// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using S4Capital.Api.Infrastructure;

#nullable disable

namespace S4Capital.Api.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20230902142200_DatabaseCreation")]
    partial class DatabaseCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b19a8b05-f7e3-4523-92fa-f93d46beef49",
                            ConcurrencyStamp = "b19a8b05-f7e3-4523-92fa-f93d46beef49",
                            Name = "Public",
                            NormalizedName = "PUBLIC"
                        },
                        new
                        {
                            Id = "0d4f0338-b3fd-4c34-9bf0-b45f35c54b12",
                            ConcurrencyStamp = "0d4f0338-b3fd-4c34-9bf0-b45f35c54b12",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        },
                        new
                        {
                            Id = "68dd6ac7-68f7-4d48-8846-9b5f0646fa39",
                            ConcurrencyStamp = "68dd6ac7-68f7-4d48-8846-9b5f0646fa39",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "acf620c4-e358-4a22-b676-2ea72d07c2f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7a87a44-05f7-4c5d-94d1-8c9238c776ae",
                            Email = "public1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLIC1@EXAMPLE.COM",
                            NormalizedUserName = "PUBLIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAEGiGpnmfAu3t6YjFfjXuyV8FfdeW6SnFN7Q7R3NKut2JZaU2nDLRSkM935d2kq76sA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2884974e-f0b0-4e54-882a-35fe2432b54f",
                            TwoFactorEnabled = false,
                            UserName = "public1"
                        },
                        new
                        {
                            Id = "d3ad3c26-a840-4b2f-b463-e23eb816bfc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3d81766-31f4-4ca7-ba23-b7e279287bdc",
                            Email = "public2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLIC2@EXAMPLE.COM",
                            NormalizedUserName = "PUBLIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVH9tJ0yH1S7xmhRkCQkRRcp8cbLaXdgEYHnxDKmFNxY3J1gnuk3IdWtDFgneuTrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7437f2b-b8ca-40fc-8035-84dd55aec5fc",
                            TwoFactorEnabled = false,
                            UserName = "public2"
                        },
                        new
                        {
                            Id = "efc59bb8-b027-4cf3-9f98-ac9c5d146ace",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3555310f-05a7-4faf-bc1f-bdf6d62e711f",
                            Email = "writer1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WRITER1@EXAMPLE.COM",
                            NormalizedUserName = "WRITER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFi9R67iXFB7MPq+4rJrLhDWigYOi9IYFSZVvf9o29l79F1YBo2tLSFA9VfZAKXJkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3bcbc31-7f15-4e64-9b8d-c7542be0577d",
                            TwoFactorEnabled = false,
                            UserName = "writer1"
                        },
                        new
                        {
                            Id = "3f862f7a-a060-4a4e-a0bd-32589acf8317",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8387124e-79e1-4c6b-ae81-973e7aaad60c",
                            Email = "writer2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WRITER2@EXAMPLE.COM",
                            NormalizedUserName = "WRITER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8q6lDte69aYEy+a4H1Yc1P3RFSMbWBSyUwxL1hixY2mRMTcctK4r1YHuJm+/b38Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "780bd6ef-371d-43fc-96c2-f6e15c10ae4b",
                            TwoFactorEnabled = false,
                            UserName = "writer2"
                        },
                        new
                        {
                            Id = "27372113-9bda-4638-9207-f1ff812dd30b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59735e9a-3354-4c61-9f4a-3d2b0d1f294d",
                            Email = "editor1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR1@EXAMPLE.COM",
                            NormalizedUserName = "EDITOR1",
                            PasswordHash = "AQAAAAIAAYagAAAAEA/51a9q6o8mu50EyF1OS9x8k5SGnZJ1cz5Ye0RguRwGwK1MXQ88hzyuyu4OXW+ttw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a4bc65c-7bb7-492f-b2f1-2b62ef4dbf8b",
                            TwoFactorEnabled = false,
                            UserName = "editor1"
                        },
                        new
                        {
                            Id = "b85bbf2f-d95e-4d5b-b819-807f825bc7b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "870799fc-3eb1-49ae-9c82-c1318c0ef24a",
                            Email = "editor2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR2@EXAMPLE.COM",
                            NormalizedUserName = "EDITOR2",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMh3H2OLm1Iwl4+k0y1lvcjtIzKpzpABXUteYCGLzNoKoGMPJbvrORik6kHb1gWPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ef12341-3949-4874-9ec5-72ce1aae23b3",
                            TwoFactorEnabled = false,
                            UserName = "editor2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "acf620c4-e358-4a22-b676-2ea72d07c2f8",
                            RoleId = "b19a8b05-f7e3-4523-92fa-f93d46beef49"
                        },
                        new
                        {
                            UserId = "d3ad3c26-a840-4b2f-b463-e23eb816bfc4",
                            RoleId = "b19a8b05-f7e3-4523-92fa-f93d46beef49"
                        },
                        new
                        {
                            UserId = "efc59bb8-b027-4cf3-9f98-ac9c5d146ace",
                            RoleId = "0d4f0338-b3fd-4c34-9bf0-b45f35c54b12"
                        },
                        new
                        {
                            UserId = "3f862f7a-a060-4a4e-a0bd-32589acf8317",
                            RoleId = "0d4f0338-b3fd-4c34-9bf0-b45f35c54b12"
                        },
                        new
                        {
                            UserId = "27372113-9bda-4638-9207-f1ff812dd30b",
                            RoleId = "68dd6ac7-68f7-4d48-8846-9b5f0646fa39"
                        },
                        new
                        {
                            UserId = "b85bbf2f-d95e-4d5b-b819-807f825bc7b7",
                            RoleId = "68dd6ac7-68f7-4d48-8846-9b5f0646fa39"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("S4Capital.Api.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("S4Capital.Api.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EditedBy");

                    b.HasIndex("RejectBy");

                    b.HasIndex("SubmittedBy");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("S4Capital.Api.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("S4Capital.Api.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("S4Capital.Api.Domain.Entities.Post", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditedBy");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Rejecter")
                        .WithMany()
                        .HasForeignKey("RejectBy");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmittedBy");

                    b.Navigation("Approver");

                    b.Navigation("Author");

                    b.Navigation("Editor");

                    b.Navigation("Rejecter");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("S4Capital.Api.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
